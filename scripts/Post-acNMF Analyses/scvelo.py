import scvelo as scv
import pathlib 
from pathlib import Path
import scanpy as sc
import anndata as an
from anndata import AnnData
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

scv.settings.verbosity = 3
scv.settings.presenter_view = True
scv.set_figure_params('scvelo')

#Read adata file
adata = sc.read_h5ad("/home/rchapple/scRNAseq/mouse/NB831/filtered/updated/NB831.h5ad")
del adata.raw
print(adata.n_vars)

#Read loom file (generated by velocyto.bsub script)
p_path_NB831 = Path('/home/rchapple/rnavelocity/mouse/NB831/NB831/') / 'possorted_genome_bam_UBK0E.loom'

ldata = scv.read_loom(p_path_NB831, cleanup=False, validate = False)
ldata.var_names_make_unique()
ldata.var.set_index(ldata.var.index.str.upper(), inplace = True)
sc.pp.calculate_qc_metrics(ldata, inplace=True)
print(ldata.n_obs, ldata.n_vars)

adata = scv.utils.merge(adata, ldata)
adata.var_names_make_unique()
print(adata.n_vars)

#Preprocessing                                
scv.pp.remove_duplicate_cells(adata)
#adata = adata[~adata.to_df().duplicated(), :]
scv.pp.filter_and_normalize(adata)                                                 
scv.pp.neighbors(adata)
scv.pp.moments(adata)                                                              
                                                                                   
#Compute velocity                                                                  
scv.tl.recover_dynamics(adata)
scv.tl.velocity(adata, mode = 'dynamical')                                        
scv.tl.velocity_graph(adata)                                                       
                                                                                   
scv.pl.velocity_embedding(adata, basis='umap', frameon=False, save='embedding.pdf')
scv.pl.velocity_embedding_grid(adata, basis='umap', color=['SingleR.main.labels', 'seurat_clusters'], save='embedding_grid.pdf', title='', scale=0.25)
scv.pl.velocity_embedding_stream(adata, basis='umap', color=['SingleR.main.labels', 'seurat_clusters'], save='embedding_stream.pdf', title='')

obsdf = adata.obs
obsdf.to_pickle("adata_obs.pkl")

#Compute latent time
scv.tl.latent_time(adata)
scv.pl.scatter(adata, color='latent_time', color_map='gnuplot', size=80, save='dynamical_latent_time.pdf', title='')

#Speed and Coherence
scv.tl.velocity_confidence(adata)
keys = 'velocity_length', 'velocity_confidence'
scv.pl.scatter(adata, c=keys, cmap='coolwarm', perc=[5, 95], save = 'dynamical_speed_coherence.pdf', title='')

adata.write("adata_NB831_velocity.h5ad")

#Top Genes 
top_genes = adata.var['fit_likelihood'].sort_values(ascending=False).index
scv.pl.scatter(adata, color='seurat_clusters', basis=top_genes[:15], ncols=5, frameon=False, save='dynamical_topgenes_model_clusters.pdf')
scv.pl.scatter(adata, color='SingleR.main.labels', basis=top_genes[:15], ncols=5, frameon=False, save='dynamical_topgenes_model_celltypelabel.pdf')

#Subset out NB cells
nb_celltype = ['0', '1', '2' ,'3', '4', '6']
adata_subset = adata[adata.obs['seurat_clusters'].isin(nb_celltype)]

sc.pp.neighbors(adata_subset, n_neighbors=15, use_rep='X_pca')

# pre-process
scv.pp.filter_and_normalize(adata_subset)
scv.pp.moments(adata_subset)

scv.tl.recover_dynamics(adata_subset)
scv.tl.velocity(adata_subset, mode='dynamical')
scv.tl.velocity_graph(adata_subset)

adata_subset.write("adata_subset_velocity.h5ad")


scv.pl.velocity_embedding(adata_subset, basis='umap', frameon=False, save='subset_embedding.pdf')
scv.pl.velocity_embedding_grid(adata_subset, basis='umap', color=['SingleR.main.labels', 'seurat_clusters'], save='subset_embedding_grid.pdf', title='', scale=0.25)
scv.pl.velocity_embedding_stream(adata_subset, basis='umap', color=['SingleR.main.labels', 'seurat_clusters'], save='subset_embedding_stream.pdf', title='')

#Compute latent time
scv.tl.latent_time(adata_subset)
scv.pl.scatter(adata_subset, color='latent_time', color_map='gnuplot', size=80, save='subset_latent_time.pdf', title='')

#Speed and Coherence
scv.tl.velocity_confidence(adata_subset)
keys = 'velocity_length', 'velocity_confidence'
scv.pl.scatter(adata_subset, c=keys, cmap='coolwarm', perc=[5, 95], save = 'subset_speed_coherence.pdf', title='')

adata_subset.write("adata_NB831_subset_velocity.h5ad")

#Top Genes 
top_genes = adata_subset.var['fit_likelihood'].sort_values(ascending=False).index
scv.pl.scatter(adata_subset, color='seurat_clusters', basis=top_genes[:15], ncols=5, frameon=False, save='subset_topgenes_model_celltypelabel.pdf')
scv.pl.scatter(adata_subset, color='SingleR.main.labels', basis=top_genes[:15], ncols=5, frameon=False, save='subset_topgenes_model_clusters.pdf')
